import json
import schedule
from threading import Thread
import telebot
import time
import hashlib

token = "5391977172:AAF_LOA1BCCFn5gMEmIm7reVFwzRE-O-mwo"
bot = telebot.TeleBot(token)


def schedule_checker():
    while True:
        schedule.run_pending()
        time.sleep(1)


@bot.message_handler(commands=['start'])
def start_message(message):
    with open("users.json", "r", encoding="utf-8") as f:
        users = json.load(f)
    f.close()
    if str(message.chat.id) not in users:
        users[str(message.chat.id)] = {"nickname": message.from_user.username, "creating": None}
    with open("users.json", "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False)
    f.close()
    # bot.send_media_group(message.chat.id, [telebot.types.InputMediaPhoto(open('image0.jpg', 'rb'), caption="text"),
    #                                        telebot.types.InputMediaPhoto(open('image1.jpg', 'rb'))])
    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.row('–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
    send = bot.send_message(message.chat.id, '''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –ë–æ—Ç "–ù–∞–∑–≤–∞–Ω–∏–µ".
                                –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–ª–∞—Ç–Ω–æ–µ, —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç  10 —Ä—É–±–ª–µ–π. –°—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è 5 –¥–Ω–µ–π.
                                ¬´–í–ê–ñ–ù–û¬ª –ù–∞–¥–æ –∫–∞–∫ —Ç–æ —Å–¥–µ–ª–∞—Ç—å , –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é 5 –¥–Ω–µ–π –∫–∞–∫ —Ç–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —á—Ç–æ —Å—Ä–æ–∫ –µ–≥–æ –∑–∞–∫–∞–Ω—á–∏–≤
                                –∞–µ—Ç—Å—è –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω–µ—á–Ω–æ.

                                –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏–≤ /help

                                –û—Ç–ø—Ä–∞–≤—å /start —á—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é.''', reply_markup=keyboard)
    bot.register_next_step_handler(send, start_func)


@bot.message_handler(content_type=['text'])
def start_func(message):
    if message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è':
        checking_adverts(message)
    elif message.text == '–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ' or message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ':

        with open("users.json", "r") as f:
            users = json.load(f)
        f.close()
        users[str(message.chat.id)]["creating"] = {"name": None, "category": None, "title": None,
                                                   "description": None, "city": None, "address": None,
                                                   "phone": None, "price": None, "photos": []}
        with open("users.json", "w") as f:
            json.dump(users, f)
        f.close()
        send = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
        bot.register_next_step_handler(send, category)
    elif message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        keyboard = telebot.types.ReplyKeyboardMarkup(True)
        keyboard.row('–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
        send = bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=keyboard)
        bot.register_next_step_handler(send, start_func)
    else:
        send = bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        bot.register_next_step_handler(send, start_func)


def checking_adverts(message):
    send = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è')


def category(message):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    users[str(message.chat.id)]["creating"]["name"] = message.text
    with open("users.json", "w") as f:
        json.dump(users, f)
    f.close()
    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.row('–õ–∏—á–Ω—ã–µ –≤–µ—â–∏', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–†–∞–±–æ—Ç–∞')
    keyboard.row('–î–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ª—É–≥')
    keyboard.row('–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å')
    send = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=keyboard)
    bot.register_next_step_handler(message, main_func)


def main_func(message):
    if message.text not in ['–õ–∏—á–Ω—ã–µ –≤–µ—â–∏', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–†–∞–±–æ—Ç–∞', '–î–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ª—É–≥',
                            '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å']:
        send = bot.send_message(message.chat.id, "–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(send, main_func)
    else:
        with open("users.json", "r") as f:
            users = json.load(f)
        f.close()
        users[str(message.chat.id)]["creating"]["category"] = message.text
        with open("users.json", "w") as f:
            json.dump(users, f)
        f.close()
        send = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫')
        bot.register_next_step_handler(send, name)


def name(message):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    users[str(message.chat.id)]["creating"]["title"] = message.text
    with open("users.json", "w") as f:
        json.dump(users, f)
    f.close()
    send = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
    bot.register_next_step_handler(send, description)


def description(message):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    users[str(message.chat.id)]["creating"]["description"] = message.text
    with open("users.json", "w") as f:
        json.dump(users, f)
    f.close()
    send = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥')
    bot.register_next_step_handler(send, city)


def city(message):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    users[str(message.chat.id)]["creating"]["city"] = message.text
    with open("users.json", "w") as f:
        json.dump(users, f)
    f.close()
    send = bot.send_message(message.chat.id,
                            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ –ø–æ–∏—Å–∫–∞. –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –∞–¥—Ä–µ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ '-'")
    bot.register_next_step_handler(send, address)


def address(message):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    users[str(message.chat.id)]["creating"]["address"] = message.text
    with open("users.json", "w") as f:
        json.dump(users, f)
    f.close()
    send = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    bot.register_next_step_handler(send, phone)


def phone(message):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    users[str(message.chat.id)]["creating"]["phone"] = message.text
    with open("users.json", "w") as f:
        json.dump(users, f)
    f.close()
    send = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É")
    bot.register_next_step_handler(send, price)


def price(message):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    users[str(message.chat.id)]["creating"]["price"] = message.text
    with open("users.json", "w") as f:
        json.dump(users, f)
    f.close()
    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.row('–ì–æ—Ç–æ–≤–æ')
    bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ 4-–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=keyboard)


@bot.message_handler(func=lambda x: x.text == "–ì–æ—Ç–æ–≤–æ")
def ready(message):
    print("ready pressed")
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    if users[str(message.chat.id)]['creating'] is not None:
        check(message)


def check(message):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    with open("categories.json", "r") as f:
        categories = json.load(f)
    f.close()
    creation = users[str(message.chat.id)]['creating']
    cat = creation["category"]
    del creation["category"]
    if cat in categories:
        categories[cat].append(creation)
    else:
        categories[cat] = [creation]
    users[str(message.chat.id)]['creating'] = None
    with open("users.json", "w") as f:
        json.dump(users, f)
    f.close()
    with open("categories.json", "w") as f:
        json.dump(categories, f)
    f.close()

    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.row('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ')
    confirm = f"\n–≥. {creation['city']}\n{creation['address']}\n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫:\n{creation['title']}\n\n" \
              f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{creation['description']}\n\n#{cat}\n#{''.join(creation['city'].split())}\n\nüìû " \
              f"{''.join(creation['phone'].split())}\n\n" \
              f"–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É"
    if len(creation['photos']) == 0:
        bot.send_message(message.chat.id, confirm, reply_markup=keyboard)
    else:
        photos = []
        for i, name in enumerate(creation['photos']):
            if i == 0:
                photos.append(telebot.types.InputMediaPhoto(open('images/' + name, 'rb'), caption=confirm))
            else:
                photos.append(telebot.types.InputMediaPhoto(open('images/' + name, 'rb')))
        bot.send_media_group(message.chat.id, photos)
    send = bot.send_message(message.chat.id, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å?", reply_markup=keyboard)
    bot.register_next_step_handler(send, start_func)


@bot.message_handler(content_types='photo')
def photo(message):
    for i in range(4):
        print(message.photo[-1].file_id, 'AAAAAAAAAAAAA')
        if len(schedule.get_jobs(str(i))) > 0:
            continue
        else:
            print(message.photo[-1].file_id)
            schedule.every(2).seconds.do(go, message, str(i)).tag(str(i))
            break


def go(message, tag=''):
    print("starting")
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    fileID = message.photo[-1].file_id
    file_info = bot.get_file(fileID)
    downloaded_file = bot.download_file(file_info.file_path)
    name = str(time.time())[-5:] + str(message.chat.id) + str(len(users[str(message.chat.id)]['creating']['photos']))
    hash_object = hashlib.sha256(name.encode("utf-8"))
    name = hash_object.hexdigest()[-10:] + ".jpg"
    with open(f"images/{name}", 'wb') as new_file:
        new_file.write(downloaded_file)
    users[str(message.chat.id)]['creating']['photos'].append(name)
    print(len(users[str(message.chat.id)]['creating']['photos']), name)
    schedule.clear(tag)
    if len(users[str(message.chat.id)]['creating']['photos']) == 4:
        bot.send_message(message.chat.id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        with open("users.json", "w") as f:
            json.dump(users, f)
        f.close()
        check(message=message)
    else:
        with open("users.json", "w") as f:
            json.dump(users, f)
        f.close()
        keyboard = telebot.types.ReplyKeyboardMarkup(True)
        keyboard.row('–ì–æ—Ç–æ–≤–æ')
        send = bot.send_message(message.chat.id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", reply_markup=keyboard)


if __name__ == "__main__":
    scheduleThread = Thread(target=schedule_checker)
    scheduleThread.daemon = True
    scheduleThread.start()
    bot.polling(none_stop=False, interval=1)
