import json
import schedule
from threading import Thread
import telebot
import time
import hashlib

from yoomoney import Quickpay, Client

token_ym = "4100112274525531.8D2250A6A1ADE9E5E275DBC5DCEFEFA876D465E8B60188017176394978C1D6F3159F9BC5711ACC46029230" \
        "4016C9ABF9E05C9DC7AE1B168458AA61CABEB14C0156C68EF95FEF56BFD0D8C335AEBAE48D345A5EFC03FA980412CA4CECC346D" \
        "D8AF9CD3C2D0FE8044CD002ECDB2441F126CC4FABE410B8004DDBA7ECDD1794D767"

token = "5391977172:AAF_LOA1BCCFn5gMEmIm7reVFwzRE-O-mwo"
bot = telebot.TeleBot(token)
with open('cities.json', 'r', encoding="utf-8") as f:
    cities = json.load(f)['cities']
f.close()
with open('all_categories.json', 'r', encoding="utf-8") as f:
    all_categories = json.load(f)['categories']
f.close()
all_categories1 = list(map(lambda x: x + "1", all_categories))


# –≠—Ç–∏ —Å–ø–∏—Å–∫–∏ –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö

def schedule_checker():
    while True:
        schedule.run_pending()
        time.sleep(1)


@bot.message_handler(commands=['start'])
def start_message(message):
    with open("users.json", "r", encoding="utf-8") as f:
        users = json.load(f)
    f.close()
    if str(message.chat.id) not in users:
        users[str(message.chat.id)] = {"nickname": message.from_user.username, "creating": None, "watching": 0,
                                       "moderating": []}
    with open("users.json", "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False)
    f.close()
    # bot.send_media_group(message.chat.id, [telebot.types.InputMediaPhoto(open('image0.jpg', 'rb'), caption="text"),
    #                                        telebot.types.InputMediaPhoto(open('image1.jpg', 'rb'))])
    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.row('–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
    send = bot.send_message(message.chat.id, '''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –ë–æ—Ç "–ù–∞–∑–≤–∞–Ω–∏–µ".
                                –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–ª–∞—Ç–Ω–æ–µ, —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç  10 —Ä—É–±–ª–µ–π. –°—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è 5 –¥–Ω–µ–π.
                                ¬´–í–ê–ñ–ù–û¬ª –ù–∞–¥–æ –∫–∞–∫ —Ç–æ —Å–¥–µ–ª–∞—Ç—å , –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é 5 –¥–Ω–µ–π –∫–∞–∫ —Ç–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —á—Ç–æ —Å—Ä–æ–∫ –µ–≥–æ –∑–∞–∫–∞–Ω—á–∏–≤
                                –∞–µ—Ç—Å—è –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω–µ—á–Ω–æ.
                                –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏–≤ /help
                                –û—Ç–ø—Ä–∞–≤—å /start —á—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é.''', reply_markup=keyboard)
    bot.register_next_step_handler(send, start_func)


@bot.message_handler(content_type=['text'])
def start_func(message):
    if message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è':
        checking_adverts(message)
    elif message.text == '–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ' or message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ':

        with open("users.json", "r", encoding="utf-8") as f:
            users = json.load(f)
        f.close()
        hash_object = hashlib.sha256(str(time.time()).encode("utf-8")).hexdigest()[-13:]
        users[str(message.chat.id)]["creating"] = {"offer_id": hash_object, "name": None, "category": None, "title": None,
                                                   "description": None, "city": None, "address": None,
                                                   "phone": None, "price": None, "photos": []}
        with open("users.json", "w") as f:
            json.dump(users, f)
        f.close()
        send = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
        bot.register_next_step_handler(send, category)
    else:
        send = bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        bot.register_next_step_handler(send, start_func)


def checking_adverts(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton(text="–õ–∏—á–Ω—ã–µ –≤–µ—â–∏", callback_data='–õ–∏—á–Ω—ã–µ –≤–µ—â–∏1'))
    keyboard.add(telebot.types.InlineKeyboardButton(text="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç1"))
    keyboard.add(telebot.types.InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞", callback_data="–†–∞–±–æ—Ç–∞1"))
    keyboard.add(telebot.types.InlineKeyboardButton(text="–î–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏", callback_data="–î–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏1"))
    keyboard.add(telebot.types.InlineKeyboardButton(text="–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", callback_data="–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å1"))
    keyboard.add(telebot.types.InlineKeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ª—É–≥", callback_data="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ª—É–≥1"))
    keyboard.add(telebot.types.InlineKeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", callback_data="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞1"))
    keyboard.add(telebot.types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å", callback_data="–ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å1"))
    send = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=keyboard)


def category(message):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    users[str(message.chat.id)]["creating"]["name"] = message.text
    with open("users.json", "w") as f:
        json.dump(users, f)
    f.close()
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton(text="–õ–∏—á–Ω—ã–µ –≤–µ—â–∏", callback_data='–õ–∏—á–Ω—ã–µ –≤–µ—â–∏'))
    keyboard.add(telebot.types.InlineKeyboardButton(text="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"))
    keyboard.add(telebot.types.InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞", callback_data="–†–∞–±–æ—Ç–∞"))
    keyboard.add(telebot.types.InlineKeyboardButton(text="–î–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏", callback_data="–î–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏"))
    keyboard.add(telebot.types.InlineKeyboardButton(text="–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", callback_data="–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"))
    keyboard.add(telebot.types.InlineKeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ª—É–≥", callback_data="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ª—É–≥"))
    keyboard.add(telebot.types.InlineKeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", callback_data="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"))
    keyboard.add(telebot.types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å", callback_data="–ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å"))
    send = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data in all_categories1)
def watching_adverts(call):
    with open("categories.json", "r") as f:
        categories = json.load(f)
    f.close()
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    cat = call.data[:-1]
    if cat in categories:
        users[str(call.message.chat.id)]["watching"] = -1
        offers = categories[cat]
        creation = offers[users[str(call.message.chat.id)]["watching"]]
        confirm = f"\n–≥. {creation['city']}\n{creation['address']}\n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫:\n{creation['title']}\n\n" \
                  f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{creation['description']}\n\nüìû " \
                  f"{''.join(creation['phone'].split())}\n\n" \
                  f"–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É"
        with open("users.json", "w") as f:
            json.dump(users, f)
        f.close()

        keyboard = telebot.types.ReplyKeyboardMarkup(True)
        keyboard.row('–î–∞–ª–µ–µ', '–û–±–Ω–æ–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
        print(offers)
        send = bot.send_message(call.message.chat.id, confirm, reply_markup=keyboard)
        bot.register_next_step_handler(send, checking_function, offers)

        # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ (–î–∞–ª–µ–µ, –û–±–Ω–æ–≤–∏—Ç—å)
        # –î–∞–ª–µ–µ - –≤ —Ñ—É–Ω–∫—Ü–∏—é next_offer
        # –û–±–Ω–æ–≤–∏—Ç—å - –°–Ω–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—é watching_adverts
    else:
        bot.send_message(call.message.chat.id, '–¢—É—Ç –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ')
        try:
            keyboard = telebot.types.InlineKeyboardMarkup()
            keyboard.add(telebot.types.InlineKeyboardButton(text="–õ–∏—á–Ω—ã–µ –≤–µ—â–∏", callback_data='–õ–∏—á–Ω—ã–µ –≤–µ—â–∏1'))
            keyboard.add(telebot.types.InlineKeyboardButton(text="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç1"))
            keyboard.add(telebot.types.InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞", callback_data="–†–∞–±–æ—Ç–∞1"))
            keyboard.add(telebot.types.InlineKeyboardButton(text="–î–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏", callback_data="–î–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏1"))
            keyboard.add(telebot.types.InlineKeyboardButton(text="–ù–µ–¥–≤–∏–∂–∏–ºo—Å—Ç—å", callback_data="–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å1"))
            keyboard.add(
                telebot.types.InlineKeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ª—É–≥", callback_data="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ª—É–≥1"))
            keyboard.add(telebot.types.InlineKeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", callback_data="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞1"))
            keyboard.add(telebot.types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å", callback_data="–ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å1"))
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, "–û–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç",
                                          reply_markup=keyboard)
        except:
            keyboard = telebot.types.InlineKeyboardMarkup()
            keyboard.add(telebot.types.InlineKeyboardButton(text="–õ–∏—á–Ω—ã–µ –≤–µ—â–∏", callback_data='–õ–∏—á–Ω—ã–µ –≤–µ—â–∏1'))
            keyboard.add(telebot.types.InlineKeyboardButton(text="–¢—Ä–∞–Ω—Å–øo—Ä—Ç", callback_data="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç1"))
            keyboard.add(telebot.types.InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞", callback_data="–†–∞–±–æ—Ç–∞1"))
            keyboard.add(telebot.types.InlineKeyboardButton(text="–î–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏", callback_data="–î–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏1"))
            keyboard.add(telebot.types.InlineKeyboardButton(text="–ù–µ–¥–≤–∏–∂–∏–ºo—Å—Ç—å", callback_data="–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å1"))
            keyboard.add(
                telebot.types.InlineKeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ª—É–≥", callback_data="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ª—É–≥1"))
            keyboard.add(telebot.types.InlineKeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", callback_data="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞1"))
            keyboard.add(telebot.types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å", callback_data="–ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å1"))
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, "–û–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç",
                                          reply_markup=keyboard)


def checking_function(message, offers):
    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        start_message(message)
    elif message.text == '–û–±–Ω–æ–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è':
        checking_adverts(message)
    else:
        next_offer(message, offers)


def next_offer(message, offers):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—É—é offers –Ω–∞–¥–æ –∫–∞–∫ —Ç–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ —á–∏—Ç–∞—è —Ñ–∞–π–ª —Å–Ω–æ–≤–∞, –º–± —á–µ—Ä–µ–∑ –±–¥
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ñ–µ—Ä–æ–≤ –µ—Å–ª–∏ abs(users[str(call.message.chat.id)]["watching"]) < –∫–æ–ª-–≤–∞ –æ—Ñ–µ—Ä–æ–≤, —Ç–æ –¥–∞–ª—å—à–µ –∏–¥–µ–º
    if abs(users[str(message.chat.id)]["watching"]) >= len(offers):
        keyboard = telebot.types.ReplyKeyboardMarkup(True)
        keyboard.row('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        send = bot.send_message(message.chat.id, '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', reply_markup=keyboard)
        bot.register_next_step_handler(send, start_message)
    else:
        users[str(message.chat.id)]["watching"] -= 1
        creation = offers[users[str(message.chat.id)]["watching"]]
        confirm = f"\n–≥. {creation['city']}\n{creation['address']}\n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫:\n{creation['title']}\n\n" \
                  f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{creation['description']}\n\nüìû " \
                  f"{''.join(creation['phone'].split())}\n\n" \
                  f"–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É"
        keyboard = telebot.types.ReplyKeyboardMarkup(True)
        keyboard.row('–î–∞–ª–µ–µ', '–û–±–Ω–æ–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
        keyboard.row('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        send = bot.send_message(message.chat.id, confirm, reply_markup=keyboard)
        with open("users.json", "w") as f:
            json.dump(users, f)
        f.close()
        bot.register_next_step_handler(send, checking_function, offers)

    # –≤—ã–≤–æ–¥ –æ—Ñ—Ñ–µ—Ä–∞ users[str(call.message.chat.id)]["watching"]
    # –∑–∞–ø–∏—Å—å –≤ users –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    # –∫–Ω–æ–ø–∫–∏ –¥–∞–ª–µ–µ –∏ –æ–±–Ω–æ–≤–∏—Ç—å


@bot.callback_query_handler(func=lambda call: call.data in all_categories)
def main_func(call):
    if call.data[-1] == '1':
        watching_adverts(call)
    elif call.data[-1] == '2':
        city(call)
    else:
        with open("users.json", "r") as f:
            users = json.load(f)
        f.close()
        users[str(call.message.chat.id)]["creating"]["category"] = call.data
        with open("users.json", "w") as f:
            json.dump(users, f)
        f.close()
        send = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫')
        bot.register_next_step_handler(send, name)


def name(message):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    users[str(message.chat.id)]["creating"]["title"] = message.text
    with open("users.json", "w") as f:
        json.dump(users, f)
    f.close()
    send = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
    bot.register_next_step_handler(send, description)


def description(message):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    users[str(message.chat.id)]["creating"]["description"] = message.text
    with open("users.json", "w") as f:
        json.dump(users, f)
    f.close()
    keyboard = telebot.types.InlineKeyboardMarkup()
    for i in cities:
        keyboard.add(telebot.types.InlineKeyboardButton(text=i, callback_data=i))
    send = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data in cities)
def city(call):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    users[str(call.message.chat.id)]["creating"]["city"] = call.data
    with open("users.json", "w") as f:
        json.dump(users, f)
    f.close()
    send = bot.send_message(call.message.chat.id,
                            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ –ø–æ–∏—Å–∫–∞. –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –∞–¥—Ä–µ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ '-'")
    bot.register_next_step_handler(send, address)


def address(message):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    users[str(message.chat.id)]["creating"]["address"] = message.text
    with open("users.json", "w") as f:
        json.dump(users, f)
    f.close()
    send = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    bot.register_next_step_handler(send, phone)


def phone(message):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    users[str(message.chat.id)]["creating"]["phone"] = message.text
    with open("users.json", "w") as f:
        json.dump(users, f)
    f.close()
    send = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É")
    bot.register_next_step_handler(send, price)


def price(message):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    users[str(message.chat.id)]["creating"]["price"] = message.text
    with open("users.json", "w") as f:
        json.dump(users, f)
    f.close()
    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.row('–ì–æ—Ç–æ–≤–æ')
    bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ 4-–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=keyboard)


@bot.message_handler(func=lambda x: x.text == "–ì–æ—Ç–æ–≤–æ")
def ready(message):
    print("ready pressed")
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    if users[str(message.chat.id)]['creating'] is not None:
        check(message)


def check(message):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    with open("categories.json", "r") as f:
        categories = json.load(f)
    f.close()
    creation = users[str(message.chat.id)]['creating']
    # -------------------
    # cat = creation["category"]
    # del creation["category"]
    # if cat in categories:
    #     categories[cat].append(creation)
    # else:
    #     categories[cat] = [creation]
    # users[str(message.chat.id)]['creating'] = None
    # with open("users.json", "w") as f:
    #     json.dump(users, f)
    # f.close()
    # with open("categories.json", "w") as f:
    #     json.dump(categories, f)
    # f.close()
    # ------------------
    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.row('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ')
    confirm = f"\n–≥. {creation['city']}\n{creation['address']}\n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫:\n{creation['title']}\n\n" \
              f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{creation['description']}\n\nüìû " \
              f"{''.join(creation['phone'].split())}\n\n" \
              f"–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É"
    if len(creation['photos']) == 0:
        bot.send_message(message.chat.id, confirm, reply_markup=keyboard)
    else:
        photos = []
        for i, name in enumerate(creation['photos']):
            if i == 0:
                photos.append(telebot.types.InputMediaPhoto(open('images/' + name, 'rb'), caption=confirm))
            else:
                photos.append(telebot.types.InputMediaPhoto(open('images/' + name, 'rb')))
        bot.send_media_group(message.chat.id, photos)
    send = bot.send_message(message.chat.id, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å?", reply_markup=keyboard)
    bot.register_next_step_handler(send, payment, creation)


@bot.message_handler(func=lambda x: x.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
def payment(message, creation):
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    users[str(message.chat.id)]['creating'] = None
    with open("users.json", "w") as f:
        json.dump(users, f)
    f.close()

    message_id = message.message_id

    quickpay = Quickpay(
        receiver="4100117780986446",
        quickpay_form="shop",
        targets="–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
        paymentType="SB",
        sum=2,
        label=creation["offer_id"]
    )
    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.row('–û–ø–ª–∞—Ç–∏–ª')
    send = bot.send_message(message.chat.id, f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {quickpay.base_url}", reply_markup=keyboard)
    bot.register_next_step_handler(send, payment_confirm, creation["offer_id"], message_id, creation)


@bot.message_handler(func=lambda x: x.text == "–û–ø–ª–∞—Ç–∏–ª")
def payment_confirm(message, offer_id, message_id, creation):
    client = Client(token_ym)
    history = client.operation_history(label=str(offer_id))
    operation = history.operations
    ind = 0
    while len(operation) == 0:
        if ind == 3:
            break
        ind += 1
        time.sleep(2)
        history = client.operation_history(label=str(offer_id))
        operation = history.operations
    if len(operation) > 0:
        with open("moderating.json", "r") as f:
            moderating = json.load(f)
        f.close()
        senf = bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
        message_id = senf.message_id
        moderating[offer_id] = [creation, message_id, message.chat.id]
        with open("moderating.json", "w") as f:
            json.dump(moderating, f)
        f.close()

        operation = operation[0]
        confirm = f"Operation_id: {operation.operation_id}\nDate: {operation.datetime}\nTitle:{operation.title}\n" \
                  f"Amount: {operation.amount}\nOffer_id: {operation.label}"
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_adding'))
        bot.send_message("1156324879", confirm, reply_markup=keyboard)
    else:
        send = bot.send_message(message.chat.id, "–í—ã –Ω–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É")
        bot.register_next_step_handler(send, payment_confirm, offer_id, message_id, creation)


@bot.callback_query_handler(func=lambda call: call.data == "confirm_adding")
def confirm_adding(call):
    if call.message.chat.username == "justPeter3":
        with open("users.json", "r") as f:
            users = json.load(f)
        f.close()
        with open("categories.json", "r") as f:
            categories = json.load(f)
        f.close()
        with open("moderating.json", "r") as f:
            moderating = json.load(f)
        f.close()

        offer_id = call.message.text.split()[-1]
        creation, message_id, chat_id = moderating[offer_id]
        del moderating[offer_id]

        cat = creation["category"]
        del creation["category"]
        if cat in categories:
            categories[cat].append(creation)
        else:
            categories[cat] = [creation]
        with open("users.json", "w") as f:
            json.dump(users, f)
        f.close()
        with open("categories.json", "w") as f:
            json.dump(categories, f)
        f.close()
        with open("moderating.json", "w") as f:
            json.dump(moderating, f)
        f.close()
        with open("categories.json", "w") as f:
            json.dump(categories, f)
        f.close()

        bot.send_message(chat_id=chat_id, text="–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞", reply_to_message_id=int(message_id))


@bot.message_handler(content_types='photo')
def photo(message):
    for i in range(4):
        print(message.photo[-1].file_id, 'AAAAAAAAAAAAA')
        if len(schedule.get_jobs(str(i))) > 0:
            continue
        else:
            print(message.photo[-1].file_id)
            schedule.every(2).seconds.do(go, message, str(i)).tag(str(i))
            break


def go(message, tag=''):
    print("starting")
    with open("users.json", "r") as f:
        users = json.load(f)
    f.close()
    fileID = message.photo[-1].file_id
    file_info = bot.get_file(fileID)
    downloaded_file = bot.download_file(file_info.file_path)
    name = str(time.time())[-5:] + str(message.chat.id) + str(len(users[str(message.chat.id)]['creating']['photos']))
    hash_object = hashlib.sha256(name.encode("utf-8"))
    name = hash_object.hexdigest()[-10:] + ".jpg"
    with open(f"images/{name}", 'wb') as new_file:
        new_file.write(downloaded_file)
    users[str(message.chat.id)]['creating']['photos'].append(name)
    print(len(users[str(message.chat.id)]['creating']['photos']), name)
    schedule.clear(tag)
    if len(users[str(message.chat.id)]['creating']['photos']) == 4:
        bot.send_message(message.chat.id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        with open("users.json", "w") as f:
            json.dump(users, f)
        f.close()
        check(message=message)
    else:
        with open("users.json", "w") as f:
            json.dump(users, f)
        f.close()
        keyboard = telebot.types.ReplyKeyboardMarkup(True)
        keyboard.row('–ì–æ—Ç–æ–≤–æ')
        send = bot.send_message(message.chat.id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", reply_markup=keyboard)


if __name__ == "__main__":
    scheduleThread = Thread(target=schedule_checker)
    scheduleThread.daemon = True
    scheduleThread.start()
    bot.polling(none_stop=False, interval=1)
